# This file has been modified from the template at https://gitlab.com/gitlab-examples/maven/simple-maven-dep/-/blob/master/.gitlab-ci.yml
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  # We are creating this variable to ensure consistent changes into `maven.repo.local` env variable
  MAVEN_REPO:
    value: ".m2/repository"
    description: "Maven Local Repo"

  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/$MAVEN_REPO -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# We use whatever the latest maven docker image is.
# I (Jake) have full faith in maven and the JDK's committment to backwards-compatibility enough that I trust
# that they're capable of compiling our source code far into the future.
# Our `<maven.compiler.source>16</maven.compiler.source>` declaration should also allow future jdk compilers to compile our code
# even if there are future language changes that would otherwise keep our code from compiling. This is not fool-proof, but
# it should be good enough for what we need to do:
# https://maven.apache.org/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html
# In the future, if this ever ends up causing us grief, the original image was maven:3.8.1-openjdk-16, but https://gitlab.se-charter.net/'s runners don't like that tag. Which is weird, because they're identical today 7/13/2021:
# https://hub.docker.com/layers/maven/library/maven/latest/images/sha256-6fa8801ba54f737292f9ec0072d81330f61a15ed9872a94edef3919dc27312e7?context=explore
# https://hub.docker.com/layers/maven/library/maven/3.8.1-openjdk-16/images/sha256-6fa8801ba54f737292f9ec0072d81330f61a15ed9872a94edef3919dc27312e7?context=explore
image: maven:latest

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - $MAVEN_REPO

# Define a pattern for future verification steps. We're only using one for now, but you should know that 
# gitlab lets you hide steps like .verify here, and use them as yaml "Node Anchors", which can be used 
# as a shared config between multiple gitlab pipeline steps
# Gitlab docs: https://docs.gitlab.com/ce/ci/yaml/index.html#anchors
# yaml spec, section 6.9.2. Node Anchors: https://yaml.org/spec/1.2/spec.html#id2785586
.verify: &verify
  stage: test
  script:
    - echo "Verification for $CI_COMMIT_REF_NAME branch"; mvn $MAVEN_CLI_OPTS verify
  rules:
    #  We merely validate feature branches (the default branch gets a *full* build below
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'

# Verify merge requests using the jdk from the maven image
verify:maven-latest:
  <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
deploy:maven-latest:
  stage: deploy
  artifacts:
    when: always
    paths:
      - target/*.jar
    expire_in: 7 days
  script:
    - if [ ! -f ci_settings.xml ];
      then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";
      else
      mvn $MAVEN_CLI_OPTS deploy --settings ci_settings.xml;
      fi
  rules:
    #  If changes are pushed to the default branch. https://docs.gitlab.com/ce/ci/jobs/job_control.html#common-if-clauses-for-rules
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
