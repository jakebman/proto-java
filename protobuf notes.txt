TOP LEVEL WARNING: USE PROTO3 of versions >=3.5!!! (allows preservation of unknown fields https://developers.google.com/protocol-buffers/docs/proto3#unknowns)
"Protocol Buffers are not designed to handle large messages. As a general rule of thumb, if you are dealing in messages larger than a megabyte each, it may be time to consider an alternate strategy." https://developers.google.com/protocol-buffers/docs/techniques#large-data

POJOs Plan:
	https://github.com/beeceej/protoform

Idle question:
	TODO: abilty to move builder to not be nested? -Probably not (because private access), but?
	TODO: how to tell in proto3 if value was sent/notSent if the value assigned was default?
		Can we do something with `optional`?
		Or is this a meaningless question?
	Do reserved enum values/names generate java enum entries? Seems improbable, because there's no correlation for name/value relation. But maybe RESERVED_33, RESERVED_34?
	https://developers.google.com/protocol-buffers/docs/proto3#importing_definitions - when searching for messages, how hard does the compiler need to care about them?
		Presumably java fails because you need a fully-qualified type name, and if you don't have the message, then you can't introspect the java package.
		Or is the failure in `import public`?
	"proto2 enums cannot be used in proto3 syntax."
	    What, exactly, does this mean? A message written in proto3 syntax cannot reference an enum written in proto2 syntax? If that, why can a proto3 message reference a proto2 message that has an enum? Is there some weird default value rule?  Is that rule that proto3 enums are always expected to be default zero, and proto2 messages choose default differently? Probably this.
	protobuf-maven-plugin/compile-mojo <writeDescriptorSet>/<attachDescriptorSet>. What do these do? Why not default true? Useful? Not?
	Is there a way to compare two message schemas and see if they seem like they're the same?
		Okay. Halting problem. How about just "They conflict at id X, because <reason>"
	Can we create a Java interface, and have these messages implement it?
		Looks onerous, but doable:
			https://github.com/protocolbuffers/protobuf/issues/4481
			https://developers.google.com/protocol-buffers/docs/reference/java-generated#plugins
		Further research:
			A protobuf plugin follows the rules here: https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.compiler.plugin.pb which references https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor.pb
			We can just write a program that std-in's the request, and std-out's certain interfaces
			And use the `// @@protoc_insertion_point` mechanism
			Which is documented here: https://developers.google.com/protocol-buffers/docs/reference/java-generated#plugins
			I can see every one of these in the generated .java files. They match https://developers.google.com/protocol-buffers/docs/reference/java-generated#plugins
				builder_implements:<messasge ID - uncertain if this is message or java class id>
				builder_scope:<messasge ID - uncertain if this is message or java class id>
				class_scope:<messasge ID - uncertain if this is message or java class id>
					docs indicate that the "class" here is only ever a message class
				interface_extends:<messasge ID - uncertain if this is message or java class id>
					Not mentioned in the docs.
				message_implements:<messasge ID - uncertain if this is message or java class id>
				outer_class_scope
				enum_scope:TYPENAME
				    In the docs, but I did not see. Probably because I didn't generate an enum when I was doing this analysis.
			<protocPlugins> in protobuf-maven-plugin:compile looks ... interesting?
				https://www.xolstice.org/protobuf-maven-plugin/examples/protoc-plugin.html - docs for that setting
				Worth playing with this? https://github.com/thesamet/protoc-plugin-in-java - easy dev?
		SUCCESS! Set up in the https://github.com/jakebman/proto-java/ project:
			* One maven project that implements the protobuf plugin spec, above. (Everything manual. Wish there were a library)
			* One maven project that encapsulates the .proto files, and using xolstice's maven plugin to plug the plugin project into protoc compiler
			* Voilà! Built!
			* TODO: figure out how to pass params through protoc to my plugin: https://github.com/protocolbuffers/protobuf/issues/4759


Proto3 Notes: https://developers.google.com/protocol-buffers/docs/proto3
	syntax line should be first non-empty, non-comment line.
	Comments are C-style //... , /* ... */
	field types:
		bool (transliterates as 0/1; can read ints. Uses C++ rules to cast ints to bool [0 is false,all others true])
		int*, sint*
		string (utf8 or ascii)
		bytes (arbitrary byte sequence)
		map<k,v> - key must be string or int-like. Transliterates like a repeated message of kv pairs
		<name of enum type>
		<name of other message type>
	field id: https://developers.google.com/protocol-buffers/docs/proto3#assigning_field_numbers
		MUST NEVER REASSIGN
		1-15 for frequent/required fields because take 1 byte overhead
		16-2047 take 2
		Total range: 1-(2^29 -1), excluding 19xxx b/c reserved (FieldDescriptor::kFirstReservedNumber)
	only real specifier is `repeated`. No optional, No required.
	"Don't go looking for facilities similar to class inheritance, though – protocol buffers don't do that." - https://developers.google.com/protocol-buffers/docs/javatutorial
	default value is never sent over the wire: https://developers.google.com/protocol-buffers/docs/proto3#default
	`required` is not a thing in proto3, ditto `optional` (or is it? https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto#L223)
	enum:
		Uses words instead of numeric values, but is otherwise encoded as number (int32; which optimizes small values and de-optimizes negative values)
		First word is required to be 0. Is also therefore the default.
		`option allow_alias = true;` to allow 2 words to map to single number. (the java language note implies this may have become the default)
		Practical limit of 1,000s of values in java(?)
		Unrecognized values preserved in a language-specific way.
			for java, that enum value is FooEnumType.UNRECOGNIZED (proto2 uses null(?)). To read value, use `int getFooValue()` instead of `FooEnumType getFoo()` (`int getFooValue(int index)` for repeated fields)
		allowed to `reserved` names and values. (names are "quoted")
		java language note:
			>The compiler always chooses the first symbol defined with a given numeric value to be the "canonical" version of that symbol
			The other is a static reference: `static final Foo BAZ = BAR;`
	importing (from arbitrary location?) is not supported in java
		Relative imports seem to work: https://www.reddit.com/r/AskProgramming/comments/ke84j0/protobuf_java_and_imports_what_to_do/gg1fvb4?utm_source=share&utm_medium=web2x&context=3
	"In general you should set the --proto_path flag to the root of your project and use fully qualified names for all imports."
	    "proto2 enums cannot be used in proto3 syntax." in "Idle Questions", above
	Nested messages referenced like in java. Java impl as nested classes, so nice parallel.
	Dynamic choice of message parse: https://developers.google.com/protocol-buffers/docs/proto3#any
		Needs a https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/TypeRegistry or the JsonTypeRegistry to understand types.  *Only types added to the registry will be understood!*
	oneof:
		components cannot be `repeated`. (proto2: `required` is also likely dumb)
		last component read from the wire is the winner
		cannot be `repeated`
		setting a component to its default value sends that default value on the wire (this is a deviation from other rules), so that the receiver will know which one of these you set.
	map:
		cannot be repeated.
		keys can only be primitive *int*, string (not float or byte, and SPECIFICALLY NOT enum)
		value can be anything except another map
		text format promises sorted keys, wire format does not.
		merging? Last entry wins value.
		key with no value? Languages handle that differently.
	rpc has description. Ignoring it.
	json:
		both original name and `json_name` (defaults to lowerCamelCase of field name) are accepted by the parser
		"null is an accepted value for all field types and treated as the default value of the corresponding field type."
		enums write string name, parsers also accept enum value.
		maps use string keys always.
		bytes are encoded base64
		Any adds "@type", then normal field/value. However, special handling for types with special json via "value" key
		"Wrapper types" preserve null?
		Some default behaviors are overridable: https://developers.google.com/protocol-buffers/docs/proto3#json_options
	options:
		can be defined at multiple levels:
			file: SUPER DOCS @ https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto#L342
			message: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto#L467
			field: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto#L535
			Options can also be written on enum types (...#L636), enum values (#L657), oneof fields(628), service types (671), and service methods (691); however, no useful options currently exist for any of these.
		java_package: modify package the java source file is generated in
		java_outer_classname: java class wrapper name
		java_multiple_files: Builder still nested, but don't generate outer class - use separate classes.
		optimize_for:
			SPEED (default)
			CODE_SIZE
			LITE_RUNTIME: link to libprotobuf-lite instead of libprotobuf. No descriptors or reflection. MessageLite interface, not Message interface.
		java don't care:
			cc_enable_arenas, objc_class_prefix,
		[deprecated=true] on field: Java: @Deprecated annotation. Good for partial removal before full removal. No protobuf implications.
		~~ Custom options ~~ : (used by plugins(?)) Uses extensions. The only time the proto2 extensions feature is allowed in proto3. (`extend Description{optional File externalRef=222;}`)
			https://developers.google.com/protocol-buffers/docs/proto#extensions



Proto Java Nano:
	Thing that exists, because the wire format is clear. Less formality in the generated java code, but at cost of dumb stuff able to happen.
	https://www.xolstice.org/protobuf-maven-plugin/compile-javanano-mojo.html
		supported by maven plugin I like, but:
		This plugin goal has been deprecated:
		>JavaNano has been deprecated in favour of Java Lite. Please see Protocol Buffers documentation for details.
Java Lite:
	Triggered when generating java code optimize_for = LITE_RUNTIME
	Notes in optimize_for

Java Notes: Java parts of proto notes, plus https://developers.google.com/protocol-buffers/docs/reference/java-generated
	compiler is program. Easier to run via maven plugin, but worth knowing what plugin does.
	Java protoc options:
		java_multiple_files // want true for clarity
		java_outer_classname // no opinion right now. Default "XxxOuterClass". Has the descriptions
		
	Names derived via obvious snake_case to lowerCamelCase or UpperCamelCase as appropriate.
	Skimmable serialization/deserialization calls: https://developers.google.com/protocol-buffers/docs/javatutorial#parsing-and-serialization
		byte[] toByteArray()
		static Person parseFrom(byte[] data)
		void writeTo(OutputStream output)
		static Person parseFrom(InputStream input)
	[CodedOutputStream](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/CodedOutputStream.html) for 
		
	https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/package-summary
	Jake prefers multiple files for clarity. 

Things that can change in a protobuf message that are valid/invalid (TODO: code these as unit tests in a standalone project)
	Google has a list of things:
		https://developers.google.com/protocol-buffers/docs/proto3#updating
		Plus, search for "Backwards-compatibility" in that whole doc.
	My interpretations of other sources and such are below
	Things you can do to a protobuf message:
		Change the name of your message (reminder: change the name in all use cases. Use a refactor tool if you have one. This is only so the rename doesn't make protoc choke. Once the new name compiles, code compiled with the old name will still be able to read messages written under the new name and vice-versa. This even applies for nested messages. ex: Message B has a member of type A. Type A is renamed to A1. Message B code still references type A, and will properly read (messages encoded by) Message B code which has been updated to use A1 instead.)
		Change the name of a field (as long as you don't care about JSON serialization)
		Change the name of an enum (same caveat as field name - goozles JSON serialization)
		Add non-required fields with non-conflicting ids 
		Add a new field into a `oneof` (creation of `oneof` is covered by "add a field")
		Add/remove `[packed=true]` from a repeated field (nb: this flag is default on for scalar fields in proto3). 
			"Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire types) can be declared "packed"."
		Remove optional fields (NB: be sure to mark both their number and name as `reserved`)(Minimally: as long as you don't later conflict and the reader doesn't think that field is required. Marking them as reserved will help with this.)
		proto2-only (proto3 skips these features):
			Remove the required-ness of a field (as long as you do this on the reader first)
			Add the required-ness of a field (as long as you do this on the writer first)
		
	Things that break:
		change the type of an id (some are valid-ish. But still. Don't. Especially don't trust Google. They say int64 is compatible with int32, but when you send an int64 to an int32, the TOP HALF of that number is truncated. You *might* be able to get away with widening an int like that. Potential hilarity between string/byte in json parsing b/c base64 encoding of bytes only)
		changing the repeated-ness of a field (especially an embedded message)
			> For embedded message fields, the parser merges multiple instances of the same field, as if with the Message::MergeFrom method – that is, all singular scalar fields in the latter instance replace those in the former, singular embedded messages are merged, and repeated fields are concatenated. [Further interesting details elided]
			https://developers.google.com/protocol-buffers/docs/encoding#optional
		add >1 existing fields into a (new or existing) oneof (unless you're 100% POSITIVE that it was already basically a oneof. See top-level change citation)
		add/remove fields in a oneof.
		add enum values. Might be okay in some situations, especially proto3 >=3.5 which preserves the enum value. Check your citations. Do not trust this note line.
		remove enum values. Might be okay... proto3>=3.5 as above. Do not trust this line. Also, use `reserved` notation when removing values. (See idle question above re: generated enums for reserved values)
		permute enum values (swap the values of two enums). No way to make this work and not break everything.
		proto2-only:
			something about maps is okay. Check the docs. I don't care. I'm proto3 -Jake
			mucking with default values is weird (proto3 defaults are the 0 for the type)
			weirdness in required: (proto3 does not have required fields)
				remove required-ness from writer first (and then not send that field).
					-> Reader will break, b/c it expected to find that field.
					TODO: Citation.
				Add required-ness to the reader first (and assumedly, the writer isn't always sending that field)
					same logic as above
				adding a new enum value to a required enum field will break parsers (proto3 does not have required)
					Since this isn't something you can tell at the enum definition, just don't do it all.

Incompatibility musings:
	"A message is always compatible with itself" has two consequences:
		If a message definition never changes, you never need to worry about compatibility
		Making an incompatible change is indistinguishable with making a different message type.
			(Justified by the contrapositive of the top statement, which is "If two message definitions are incompatible, they are not the same {equal via the identity under which "itself" is defined} message definitions")
	Because the edit distance of two files (of fixed finite sizes) is not infinite, any two independent message definitions could be considered to be (incompatible, most likely) "changes" applied to the other.
	Several types of incompatibility exist. (examples will use Message A as the "before" and Message B as the "after"):
		Making this change could produce a parse error in the wire format (Hard error. No fix but to change them)
		Round-trip ability is compromised.
			basically just the proto3 < 3.5 thing.
		Sending these messages back an forth *will not* produce a parse error in the wire format *and you should be very concerned about that!*
			These differently-named messages are 100% wire compatible, but it still might be a *very bad* idea to send one to the other
						These messages overlap on names and types (so if they have the same message name, their types are API compatible), but don't actually transfer the fields between themselves:
							Message A:
								optional int32 a = 1;
								optional int32 b = 2;
							Message B:
								optional int32 a = 3;
								optional int32 b = 4;

						These messages don't have an overlap at all (You should be *very* concerned, because these *make no sense* together, despite producing no wire errors)
							Message A:
								optional int32 a = 1;
								optional int32 b = 2;
							Message B:
								optional string c = 3;
								optional string d = 4;
		Source code/runtime issues in a projected language:
			Making this change could produce a compile-time error in client code (Warn/info. You'll see this quickly from other tools)
				Removing a field in java (which you use in the client code). Client compilation will fail because the old-named getFoo method is missing (now named getBar which is not "the same method" in java-land)
			Making this change could produce a link-time error in client code (Ditto. Mostly C++. Can probably call this a compile-time error in C++, too.)
			Making this change could produce a runtime error in client code (Error/warn depending on might/could/will chances)
				Removing a field in Java code (which you use in client code), *without* recompiling the client code (you just drop the new .jar in your classpath and call it a day).  Java will runtime error with MethodNotFoundException.
		Making this change could produce a logic error in client code (Debug/Error)
			Removing this field from the wire-writer only, mean that you've got client code that *literally never runs* Do yourself a favor and remove it from the wire-reader, too.
			Changing these bytes to string removes the base64 encoding on this field's JSON representation. If your client reads via json, it might accidentally use the base64-encoded value instead of the unicode-encoded string value. (Ignore/Hard Error)
	Changes, evaluated:
		Everything in https://developers.google.com/protocol-buffers/docs/javatutorial#extending-a-protocol-buffer
		"The wire type of this field id is *different*". Hard Error..
			Literally impossible to resolve unless your target language is willing to do stupid things like convert obviously-numeric values to strings, or automagically interpret a struct as an enumeration value. Even then, very likely to cause logic errors.
		The name of this field id is changed, but retains the correct type. Info. ERROR if JSON.
			The bytes on the wire don't care. Target language projections might care. Separate wire-writer/wire-reader won't care.
			Json serialization *definitely* cares.
			Client code cares if you change this on them. 
		The id of this field name is changed, but retains the correct type. Info. 
			Client code sees these as the same (assuming same message name)
		Message name changed. Strange.
			Only really applicable if there's only one message in the .proto files being compared (otherwise, no way to correlate which-of-two messages in the first file relate to which-of-two message in the second file)
			Client code cares. Compiled name will be different.
		Package name changed. Strange.
			Not a good idea - breaks client *proto* code too.
			Client code potentially affected.
		Added field id. Debug. Warn if proto3 < 3.5. Error if new field is required. Error if id was previously reserved.
			Very few things would care about non-required.
			Heads up about older proto3 dropping unknown data.
			see also: changes to id of a field name
		Removed required field id. Error.
		Removed non-required field id. Info. Warn if not reserved in new message.
			(Completeness might require ERROR if not reserved, because remove-then-add might make a two-step incompatible change not emit an error from this analysis)
		Remove reserved-ness anywhere. Error.
		Language-specific settings changed. Client Code affected.
		Json notation changes. Warn. Flag to ignore json issues?
			Wire format doesn't care.
			Json does care.
			Some code you write might care; especially if you write JSON to someone else. Depends on your logic
		Reader/Writer vs Writer/Reader changes:
			Some changes are SUPER compatible if all your wire-writers start making them first
				Removing an already-optional field. Your wire-readers are already prepared to handle this field being missing
			Others are SUPER compatible if all your wire-readers start making them first
				readers expecting a new field (and accepting the default value) *before* the writers start adding it? Super Compatible.



Readings:
	Spring compatibility: https://spring.io/blog/2015/03/22/using-google-protocol-buffers-with-spring-mvc-based-rest-services links to github too
	Maven plugin: https://www.xolstice.org/protobuf-maven-plugin/compile-mojo.html
	.proto file style guide (proto2: required and groups are no-nos): https://developers.google.com/protocol-buffers/docs/style
	
