syntax = "proto3";
option java_multiple_files = true;
option java_outer_classname = "somePersonOuterClassThing";
option java_package = "com.charter.nns.protobuf";
package nns; // proto packages don't care for reverse url phrasing


//Changes that break downstream Java code:
//option java_multiple_files = ...; // default false
//option java_package = "..."; // if unspecified, uses proto package declaration
//option java_outer_classname = "..."; // only if java_multiple_files is not true
//package madeupProtoPackage.jake.protobuf; //(only if java_package is not set)

/**
  IntelliJ Protocol Buffer language note:
  When dealing with protos, IntelliJ looks for your protos relative to "Sources Root" folders.
  And the ../src/main/protos folders are not automatically marked as that.
  So, heads up - you might need to do that.
 */

import "nns/extensions.proto"; //Woo! it works!

message Person {
  // see https://developers.google.com/protocol-buffers/docs/proto#customoptions
  //  option (nns.java_helper_message).enabled = true;
  //  option (nns.java_helper_message).implements = "com.charter.nns.UsabilityImprovedMessage";
  option (nns.java_helper_message) = {
    enabled:true,
    implements:["com.charter.nns.example.UsabilityImprovedMessage", "java.io.Serializable"]
  };
  message Nested{int32 field = 1;}
  string name = 1;
  //  NON-COMPATIBLE CHANGE, conflicts on 1 with name, and is a different type
  //  required int32 name = 1;
  int32 id = 2;
  /* If you:
      * Have enabled the plugin
      * have an optional primitive field (not string or a nested message
      * and that primitive field's name ends in "_primitive"
     We generate a nullable field, based on the name-minus-primitive
  */
  optional int64 some_primitive = 44;
  //  required int32 newid = 2;
  repeated string description = 45;
  optional string email = 3;
  optional Nested nested = 4;
  map<int32, string> things = 6;
  bytes arbitrary_bytes = 233;

}


import "google/protobuf/descriptor.proto";

// the IntelliJ protobuf editor plugin doesn't like this (because it's not in protbuf-editor.jar/include)
// but the maven plugin *does* see it, so it compiles fine without IntelliJ knowing.
// We have the whole google-plugin-api-to-appease-intellij module to... appease intellij and remove these squiggles
// :D
import "google/protobuf/compiler/plugin.proto";
message IntrospectionFun {
  optional google.protobuf.FileDescriptorSet e = 33;
  google.protobuf.compiler.CodeGeneratorRequest req = 1;
}

//added at source: skipped at destintiation
// removed from source: destination does not complain, *unless destination believes field is required*

// More flexible than kryo - yes. Allows fields to be added and removed (as long as certain constraints are met)

message Person2 {
  optional Person foo = 32;
  message Nested{int32 field = 1;}
  string name = 1;
  int32 id = 2;
  //  required int32 newid = 2;
  repeated string description = 100000000;
  optional string email = 3;
  optional Nested nested = 4;
  optional bytes shortCutForCOmplexSubFieldStillUsingKryo = 66;
  map<int32, string> things = 6;

}

